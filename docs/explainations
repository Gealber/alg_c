This document contains an explanation of each algorithm.
In case of any error please contact with me :)

====================================================================
MAX_HEAPIFY:
This is a the heap to be max-heapify:
(A) --- |16|4|10|14|7|9|3|2|8|1|
            ^
(B) --- |16|14|10|4|7|9|3|2|8|1|
                            ^
(C) --- |16|14|10|8|7|9|3|2|4|1|

Which also can be seen in this ugly graphical :?/
representation:
				16
		       /  \
		     4     10
(A)		    / \   /  \
		  14   7 9    3
	      / \ /  
		2   8 1





				16
		       /  \
		     14     10
(B)		    / \    /  \
		  4    7  9    3
	     / \  /   
		2   8 1




				16
		       /  \
		     14     10
(C)		    / \   /  \
		   8   7 9    3
         /  \ /
		2   4 1

=======================================================

QUICKSORT

PARTITION
Suppose we want to partition the array A=[2,8,7,1,3,5,6,4]

 |2|8|7|1|3|5|6|4|
i^              x^

j=0...6

j=0
A[0]=2 < 4=x
	i=-1+1=0
	A[0]exchange with A[0]

 |2|8|7|1|3|5|6|4|
  i^j^         x^

j=1
A[1]=8 > 4
nothig to do

j=2
A[2]=7 > 4
nothing to do

j=3
A[3]=1 < 4
	i=0+1=1
	A[1]=1 and A[3]=8
 |2|1|7|8|3|5|6|4|
    i^  j^

j=4
A[4]=3 < 4
	i=1+1=2
	A[2]=3 and A[4]=7
 |2|1|3|8|7|5|6|4|
      i^  j^

j=5
A[5]=5 > 4
nothing to do
j=6
A[6]=6 > 4
nothing to do

end of for-loop
A[3]=4 and A[7]=8
 |2|1|3|4|7|5|6|8|
   <=4  i^  >4   ^

So what we can see from this is that the i index marks the lower limit
of the numbers that are greater than the value x while the j marks the 
upper bound. After all that we return the i which is the pivot or marker.

Now after doing the partitioning we can now call Quicksort in each subarray
like this:
if(p < r) {
	q = Partition(a,p,r)
	Quicksort(a, p, q-1);
	Quicksort(a, q+1, r);
}
after this both arrays are gonna be sorted and as the value in the first call
to Partition acts as a pivot all the array is gonna be sorted.
 |1|2|3|4|5|6|7|8|
        ^
       pivot

======================================================================================
RANDOMIZED QUICKSORT
Just randomized the pivot selection to simulate an average case of a quicksort
that has a great performance.
======================================================================================
HOARE PARTITION
This is another way to make the partition in a more efficient way.
The previous partition is known as Lomuto partitioning. In the Hoare partitioning
instead of set the index i and j at the begining we set this indexes at the extreme
i at the begining and j at the end. We move toward each other these indexes until
they detect a pair of elements, one greater or equal than the pivot, one lesser or
equal. Then these elements are swapped, below I show you the pseudocode:

Hoare_partition(A,p,r)
pivot = A[p]
i = p - 1
j = r + 1
while True
	repeat
		j = j - 1
	until A[j] <= x
	repeat 
		i = i + 1
	until A[i] >= x
	if i < j
		EXCHANGE A[i] and A[j]
	else return j
=========================================================================================
COUNTING SORT

First of all this algorithm assume that each of the n inputs are integers in a range of
[0,k] for some integer k. Also determines the position of a given element an put
it in the position that correspond. For example if 17 elements are less than x the puts
x in the position 18. We most modify this scheme slightly to handle the situation in
which several element have the same values.(This last sentence is from THE BOOK).
We will need two other arrays, one for hold the sorted output and one for a provisional 
storage. Let's call them B[1...n] and C[1...k].
------------------------------------------------
Pseudocode

Counting_sort(A, B, k)                  
1.let C[0..k] be a new array
2.for i=0 to k
3.	C[i] = 0
//A-->|2|5|3|0|2|3|0|3|  C-->|0|0|0|0|0|0|

4.for j = 1 to A.length
5.	C[A[j]] = C[A[j]] + 1
// A-->|2|5|3|0|2|3|0|3| C-->|2|0|2|3|0|1|

6.for i = 1 to k
7.	C[i] = C[i] + C[i-1]
// C-->|2|2|4|7|7|8|

8.for j = A.length downto 1
9.	B[C[A[j]]] = A[j]
// first iteration only
//B-->B[7] = 3
10.	C[A[j]] = C[A[j]] - 1
// C[3] = 7-1=6

So let's try to explain what is happening here:
--------------------------------------------------
First we initialize the the C[0..k] array with the values zeros values in all its cells. 
Then like the n elements in the array A are less than k, C[A[j]] is a valid operation.
Take a look at this operation C[A[j]], A[j] is a number between 0 and k so when you make
C[A[j]] = C[A[j]] + 1, you are setting a counter to mark how many times a number between 0 and k
is in the array A. So C[i] contains the number of time a i is in tha array A.
Now in steps 6 and 7 we got, for example:

C[1] = C[1] + C[0] ---> # of elements equal to 0
        ^
        | # of elements equal to 1
so C[1] contains how many numbers are less than or equal to 1.
So in steps 6 and 7 we reassign the values of C to contains C[i] the number of elements in A
less than or equal to i.
Do you remember the B array which will conatins the input, well now he comes to play its role.
In steps from 8 to 10 we make two main operations let's look at it in depth:
B[C[A[j]]] = A[j] here remember that at this point C[A[j]] is equal to the number of elements
in A that are less than or equal to A[j], so you are going to position A[j] in that position in B.
More explicit let's say A[j]=5 then C[A[j]]=C[5]=3 tells you that are three elements less than or equal
to 5 soy A[j] goes in position 3 in the new array B. After that you simple decrese the counter of C[A[j]]
because we just position one number in the B array.
=========================================================================================================
RANDOMIZED SELECT

This algorithm solve the selection problem(page 213 of THE BOOK chapter 9, there is a definition of this
problem there) with linear expecting running time(I need to find the appropiate symbols to put the big-O notation).
Like the randomized version of quicksort this algorithm make use also of the randomized partition. 
-----------------------------------------------------------------------------------------------
PSEUDOCODE

Randomized_Select(A, p, r, i)
1.if p == r
2.	return A[p]
//base case of recursion

3.q = Randomized_Partition(A,p,r)
4.k = q - p + 1
//makes a partition with the randomized partition algorithm to get the pivot
//so now A[p..r] is divided in two subarrays A[p..q-1] and A[q+1..r]. k just count 
//how many element we got in the subarray A[p..q-1] plus the pivot A[q].

5.if i == k
6.	return A[q]
//now if i = k like all elements in A[p..q-1] are less than or equal to A[q] and A[p..q-1] has
//k elements including the pivot the the answer is the pivot.

7.elseif i < k
8.	return Randomized_Select(A, p, q-1, i)
//if i < k then the answer is inside A[p..q-1] so we call again recursively to Randomized_Select in that
//array and with this same i.

9.else return Randomized_Select(A, q+1,r,i-k)
// in another case the answer is in the other subarray so we call again Randomized_Select but in this case with i-k
It makes sense to me.
Note: There's a better algorithm for the selection problem but I'm not going to include it, see page 220 of THE BOOK.
====================================================================================================================
STACKS(LIFO-->Last-in,first-out)
First will be implementing a Stack with the following methods:
*Stack-empty
*Push
*Pop
====================================================================================================================
QUEUE(FIFO-->First-in,first-out)
*Enqueue
*Dequeue

